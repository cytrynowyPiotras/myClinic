package com.clinicapp.gui.showDocVisits;

import com.clinicapp.classes.Appointment;
import com.clinicapp.classes.DataChecker;
import com.clinicapp.classes.Doctor;
import com.clinicapp.classes.Patient;
import com.clinicapp.connector.dbAppointment.GetDoctorsTakenAppointments;
import com.clinicapp.connector.dbAppointment.RemoveAppointment;
import com.clinicapp.connector.dbPatient.GetPatientByPesel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

public class showDocsVisitsFrame {
    private JTextField dateTextField;
    private JButton searchButton;
    private JList list1;
    private JButton removeButton;
    private JPanel visitJPanel;
    private static ArrayList<Appointment> docsApp;

    public showDocsVisitsFrame(JButton creator, Doctor doc) {
        JFrame frame = new JFrame("Wizyty lekarza: " + doc.getName() + " " + doc.getSurname());
        frame.setContentPane(visitJPanel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setBounds(300, 300, 500, 300);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                creator.setEnabled(true);
                frame.dispose();
            }
        });
        frame.setVisible(true);
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String date = dateTextField.getText();

                if (!DataChecker.checkDate(date)) {
                    JOptionPane.showMessageDialog(null, "Podano zły format daty");
                    return;
                }
                ArrayList<Appointment> myApp = new ArrayList<>();
                try {
                    myApp = GetDoctorsTakenAppointments.get(doc.getId(), date);
                } catch (Exception o) {
                    JOptionPane.showMessageDialog(null, "Błąd połączenia", "Error!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                docsApp = myApp;
                list1.removeAll();
                ArrayList<String> myDesc = new ArrayList<>();
                for (int i = 0; i < myApp.size(); i++) {
                    Appointment currApp = myApp.get(i);
                    String desc = currApp.getTime().toString() + " ";
                    String patPesel = currApp.getPatientPesel();
                    if (patPesel == null) {
                        desc += "Wolny termin";
                    } else {
                        Patient pat = GetPatientByPesel.get(patPesel).get(0);
                        desc += pat.getName() + pat.getSurname();
                    }
                    myDesc.add(desc);
                }
                list1.setListData(myDesc.toArray());
            }
        });
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedIdx = list1.getSelectedIndex();
                if (selectedIdx == -1) {
                    JOptionPane.showMessageDialog(null, "Musisz wybrać wizytę", "Error!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Appointment appToDel = docsApp.get(selectedIdx);
                try {
                    RemoveAppointment.remove(appToDel.getDateId());
                } catch (Exception l) {
                    JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!", "Error!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(null, "Usnięto termin", "Sukces", JOptionPane.INFORMATION_MESSAGE);
                frame.dispose();
                return;
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        visitJPanel = new JPanel();
        visitJPanel.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        visitJPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText(" Wpisz datę (yyyy-mm-dd): ");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateTextField = new JTextField();
        panel1.add(dateTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        searchButton = new JButton();
        searchButton.setText("Szukaj");
        panel1.add(searchButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        visitJPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        visitJPanel.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        removeButton = new JButton();
        removeButton.setText("Usuń");
        visitJPanel.add(removeButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        visitJPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        scrollPane1.setViewportView(list1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return visitJPanel;
    }

}
